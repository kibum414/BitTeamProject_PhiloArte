{"ast":null,"code":"import axios from 'axios';\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { UserService } from '../index'; // 미들웨어\n// 페이로드 생성자\n// 비동기 + 콜백으로 되어 있기 때문에 호출될 때만 작동\n\nexport const getUserList = createAsyncThunk(\"users/fetch\", // 액션 이름 정의\nasync () => {\n  // 비동기 호출 함수 정의\n  alert(`getUserList`);\n  const response = await UserService.fetch();\n  return response.data;\n}); // 콜백 : 호출될 때만 작동\n\nconst isRejectedAction = action => action.type.endsWith('rejected'); // name, initialState, reducers, extraReducers 까지는 만들어짐\n// extraReducers 내부는 호출되기 전까지는 없음\n\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder // getUserList 성공 시\n    .addCase(getUserList.fulfilled, (state, {\n      payload\n    }) => {\n      alert(`3. 리덕스 내부 회원 목록 조회 성공 ${payload}`);\n      return [...payload];\n    }).addMatcher(isRejectedAction, () => {}).addDefaultCase((state, action) => {});\n  }\n}); // 리듀서 등록은 됨\n\nconst {\n  actions,\n  reducer\n} = userSlice;\nexport const {} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/superstar_pkb/project/Bitcamp Team Project V2/fe/src/webapp/user/reducer/user.reducer.js"],"names":["axios","createAsyncThunk","createSlice","UserService","getUserList","alert","response","fetch","data","isRejectedAction","action","type","endsWith","userSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","addMatcher","addDefaultCase","actions","reducer"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CACzC,aADyC,EAC1B;AACf,YAAY;AAAE;AACZI,EAAAA,KAAK,CAAE,aAAF,CAAL;AACA,QAAMC,QAAQ,GAAG,MAAMH,WAAW,CAACI,KAAZ,EAAvB;AAEA,SAAOD,QAAQ,CAACE,IAAhB;AACD,CAPwC,CAApC,C,CAUP;;AACA,MAAMC,gBAAgB,GAAGC,MAAM,IAAKA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB,UAArB,CAApC,C,CAEA;AACA;;;AACA,MAAMC,SAAS,GAAGX,WAAW,CAAC;AAC5BY,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACL;AADK,KAEJC,OAFH,CAEWf,WAAW,CAACgB,SAFvB,EAEkC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtDjB,MAAAA,KAAK,CAAE,yBAAwBiB,OAAQ,EAAlC,CAAL;AAEA,aAAO,CAAC,GAAGA,OAAJ,CAAP;AACD,KANH,EAOGC,UAPH,CAOcd,gBAPd,EAOgC,MAAM,CAAG,CAPzC,EAQGe,cARH,CAQkB,CAACH,KAAD,EAAQX,MAAR,KAAmB,CAAG,CARxC;AASD;AAd2B,CAAD,CAA7B,C,CAiBA;;AACA,MAAM;AAAEe,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBb,SAA7B;AACA,OAAO,MAAM,KAAMY,OAAZ;AACP,eAAeC,OAAf","sourcesContent":["import axios from 'axios'\nimport { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { UserService } from '../index'\n\n// 미들웨어\n// 페이로드 생성자\n// 비동기 + 콜백으로 되어 있기 때문에 호출될 때만 작동\nexport const getUserList = createAsyncThunk(\n  \"users/fetch\", // 액션 이름 정의\n  async () => { // 비동기 호출 함수 정의\n    alert(`getUserList`)\n    const response = await UserService.fetch()\n\n    return response.data\n  }\n)\n\n// 콜백 : 호출될 때만 작동\nconst isRejectedAction = action => (action.type.endsWith('rejected'))\n\n// name, initialState, reducers, extraReducers 까지는 만들어짐\n// extraReducers 내부는 호출되기 전까지는 없음\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // getUserList 성공 시\n      .addCase(getUserList.fulfilled, (state, { payload }) => {\n        alert(`3. 리덕스 내부 회원 목록 조회 성공 ${payload}`)\n\n        return [...payload]\n      })\n      .addMatcher(isRejectedAction, () => { })\n      .addDefaultCase((state, action) => { })\n  }\n})\n\n// 리듀서 등록은 됨\nconst { actions, reducer } = userSlice\nexport const { } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}