{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { UserService } from '../index'; // 미들웨어\n// 페이로드 생성자\n// 비동기 + 콜백으로 되어 있기 때문에 호출될 때만 작동\n\nexport const getUserList = createAsyncThunk(\"users/findAll\", async () => {\n  // 액션 이름 및 비동기 호출 함수 정의\n  const res = await UserService.fetch();\n  return res.data;\n});\nexport const userSignUp = createAsyncThunk(\"users/signup\", async arg => {\n  const res = await UserService.signup(arg);\n  return res.data;\n}); // 콜백 : 호출될 때만 작동\n\nconst isRejectedAction = action => action.type.endsWith('rejected'); // name, initialState, reducers, extraReducers 까지는 만들어짐\n// extraReducers 내부는 호출되기 전까지는 없음\n\n\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: [],\n  reducers: {},\n  extraReducers: builder => {\n    builder // getUserList 성공 시\n    .addCase(getUserList.fulfilled, (state, {\n      payload\n    }) => {\n      alert(`3. 리덕스 내부 회원 목록 조회 성공 ${payload}`);\n      return [...payload];\n    }).addCase(userSignUp.fulfilled, (state, {\n      payload\n    }) => {\n      return [...payload];\n    }).addMatcher(isRejectedAction, () => {}).addDefaultCase((state, action) => {});\n  }\n}); // 리듀서 등록은 됨\n\nconst {\n  actions,\n  reducer\n} = userSlice;\nexport const {} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/superstar_pkb/project/Bitcamp Team Project V2/fe/src/webapp/user/reducer/user.reducer.js"],"names":["createAsyncThunk","createSlice","UserService","getUserList","res","fetch","data","userSignUp","arg","signup","isRejectedAction","action","type","endsWith","userSlice","name","initialState","reducers","extraReducers","builder","addCase","fulfilled","state","payload","alert","addMatcher","addDefaultCase","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,UAA5B,C,CAEA;AACA;AACA;;AACA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CAAC,eAAD,EAAkB,YAAY;AAAE;AACzE,QAAMI,GAAG,GAAG,MAAMF,WAAW,CAACG,KAAZ,EAAlB;AACA,SAAOD,GAAG,CAACE,IAAX;AACD,CAH0C,CAApC;AAKP,OAAO,MAAMC,UAAU,GAAGP,gBAAgB,CAAC,cAAD,EAAiB,MAAOQ,GAAP,IAAe;AACxE,QAAMJ,GAAG,GAAG,MAAMF,WAAW,CAACO,MAAZ,CAAmBD,GAAnB,CAAlB;AACA,SAAOJ,GAAG,CAACE,IAAX;AACD,CAHyC,CAAnC,C,CAOP;;AACA,MAAMI,gBAAgB,GAAGC,MAAM,IAAKA,MAAM,CAACC,IAAP,CAAYC,QAAZ,CAAqB,UAArB,CAApC,C,CAEA;AACA;;;AACA,MAAMC,SAAS,GAAGb,WAAW,CAAC;AAC5Bc,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACL;AADK,KAEJC,OAFH,CAEWjB,WAAW,CAACkB,SAFvB,EAEkC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACtDC,MAAAA,KAAK,CAAE,yBAAwBD,OAAQ,EAAlC,CAAL;AAEA,aAAO,CAAC,GAAGA,OAAJ,CAAP;AACD,KANH,EAOGH,OAPH,CAOWb,UAAU,CAACc,SAPtB,EAOiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACrD,aAAO,CAAC,GAAGA,OAAJ,CAAP;AACD,KATH,EAUGE,UAVH,CAUcf,gBAVd,EAUgC,MAAM,CAAG,CAVzC,EAWGgB,cAXH,CAWkB,CAACJ,KAAD,EAAQX,MAAR,KAAmB,CAAG,CAXxC;AAYD;AAjB2B,CAAD,CAA7B,C,CAoBA;;AACA,MAAM;AAAEgB,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBd,SAA7B;AACA,OAAO,MAAM,KAAMa,OAAZ;AACP,eAAeC,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { UserService } from '../index'\n\n// 미들웨어\n// 페이로드 생성자\n// 비동기 + 콜백으로 되어 있기 때문에 호출될 때만 작동\nexport const getUserList = createAsyncThunk(\"users/findAll\", async () => { // 액션 이름 및 비동기 호출 함수 정의\n  const res = await UserService.fetch()\n  return res.data\n})\n\nexport const userSignUp = createAsyncThunk(\"users/signup\", async (arg) => {\n  const res = await UserService.signup(arg)\n  return res.data\n})\n\n\n\n// 콜백 : 호출될 때만 작동\nconst isRejectedAction = action => (action.type.endsWith('rejected'))\n\n// name, initialState, reducers, extraReducers 까지는 만들어짐\n// extraReducers 내부는 호출되기 전까지는 없음\nconst userSlice = createSlice({\n  name: 'users',\n  initialState: [],\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      // getUserList 성공 시\n      .addCase(getUserList.fulfilled, (state, { payload }) => {\n        alert(`3. 리덕스 내부 회원 목록 조회 성공 ${payload}`)\n\n        return [...payload]\n      })\n      .addCase(userSignUp.fulfilled, (state, { payload }) => {\n        return [...payload]\n      })\n      .addMatcher(isRejectedAction, () => { })\n      .addDefaultCase((state, action) => { })\n  }\n})\n\n// 리듀서 등록은 됨\nconst { actions, reducer } = userSlice\nexport const { } = actions\nexport default reducer"]},"metadata":{},"sourceType":"module"}