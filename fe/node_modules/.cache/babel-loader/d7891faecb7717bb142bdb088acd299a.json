{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { WorkService } from 'webapp/work';\nexport const getWorkList = createAsyncThunk(\"WORK_LIST\", async () => {\n  const response = await WorkService.list();\n  return response.data;\n});\nexport const getWorkRegister = createAsyncThunk(\"WORK_REGISTER\", async args => {\n  const response = await WorkService.register(args);\n  alert(`getWorkRegister() : ` + JSON.stringfy(args));\n  return response.data;\n});\nexport const getWorkRead = createAsyncThunk(\"WORK_READ\", async () => {\n  const response = await WorkService.read();\n  return response.data;\n});\nexport const getWorkModify = createAsyncThunk(\"WORK_MODIFY\", async args => {\n  const response = await WorkService.modify(args);\n  return response.data;\n});\nexport const getWorkDelete = createAsyncThunk(\"WORK_DELETE\", async args => {\n  const response = await WorkService.del(args);\n  return response.data;\n});\nconst workSlice = createSlice({\n  name: 'works',\n  initialState: [],\n  reducer: {},\n  extraReducers: builder => {\n    builder.addCase(getWorkList.fulfilled, (state, {\n      payload\n    }) => {}).addCase(getWorkRegister.fulfilled, (state, {\n      payload\n    }) => {\n      alert(`등록 : ${payload}`);\n    }).addCase(getWorkRead.fulfilled, (state, {\n      payload\n    }) => {}).addCase(getWorkModify.fulfilled, (state, {\n      payload\n    }) => {}).addCase(getWorkDelete.fulfilled, (state, {\n      payload\n    }) => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = workSlice;\nexport const {} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/superstar_pkb/project/BitCamp Team Project V2/fe/src/webapp/work/reducer/work.reducer.js"],"names":["createAsyncThunk","createSlice","WorkService","getWorkList","response","list","data","getWorkRegister","args","register","alert","JSON","stringfy","getWorkRead","read","getWorkModify","modify","getWorkDelete","del","workSlice","name","initialState","reducer","extraReducers","builder","addCase","fulfilled","state","payload","actions"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGH,gBAAgB,CAAC,WAAD,EACzC,YAAY;AACV,QAAMI,QAAQ,GAAG,MAAMF,WAAW,CAACG,IAAZ,EAAvB;AAEA,SAAOD,QAAQ,CAACE,IAAhB;AACD,CALwC,CAApC;AAQP,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAAC,eAAD,EAC7C,MAAOQ,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMF,WAAW,CAACO,QAAZ,CAAqBD,IAArB,CAAvB;AACAE,EAAAA,KAAK,CAAE,sBAAD,GAAyBC,IAAI,CAACC,QAAL,CAAcJ,IAAd,CAA1B,CAAL;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CAN4C,CAAxC;AASP,OAAO,MAAMO,WAAW,GAAGb,gBAAgB,CAAC,WAAD,EACzC,YAAY;AACV,QAAMI,QAAQ,GAAG,MAAMF,WAAW,CAACY,IAAZ,EAAvB;AAEA,SAAOV,QAAQ,CAACE,IAAhB;AACD,CALwC,CAApC;AAQP,OAAO,MAAMS,aAAa,GAAGf,gBAAgB,CAAC,aAAD,EAC3C,MAAOQ,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMF,WAAW,CAACc,MAAZ,CAAmBR,IAAnB,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CAL0C,CAAtC;AAQP,OAAO,MAAMW,aAAa,GAAGjB,gBAAgB,CAAC,aAAD,EAC3C,MAAOQ,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMF,WAAW,CAACgB,GAAZ,CAAgBV,IAAhB,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CAL0C,CAAtC;AAQP,MAAMa,SAAS,GAAGlB,WAAW,CAAC;AAC5BmB,EAAAA,IAAI,EAAE,OADsB;AAE5BC,EAAAA,YAAY,EAAE,EAFc;AAG5BC,EAAAA,OAAO,EAAE,EAHmB;AAI5BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACWtB,WAAW,CAACuB,SADvB,EACkC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAEvD,CAHH,EAIGH,OAJH,CAIWlB,eAAe,CAACmB,SAJ3B,EAIsC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AAC1DlB,MAAAA,KAAK,CAAE,QAAOkB,OAAQ,EAAjB,CAAL;AACD,KANH,EAOGH,OAPH,CAOWZ,WAAW,CAACa,SAPvB,EAOkC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAEvD,CATH,EAUGH,OAVH,CAUWV,aAAa,CAACW,SAVzB,EAUoC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAEzD,CAZH,EAaGH,OAbH,CAaWR,aAAa,CAACS,SAbzB,EAaoC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAEzD,CAfH;AAgBD;AArB2B,CAAD,CAA7B;AAwBA,MAAM;AAAEC,EAAAA,OAAF;AAAWP,EAAAA;AAAX,IAAuBH,SAA7B;AACA,OAAO,MAAM,KAAMU,OAAZ;AACP,eAAeP,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { WorkService } from 'webapp/work'\n\nexport const getWorkList = createAsyncThunk(\"WORK_LIST\",\n  async () => {\n    const response = await WorkService.list()\n\n    return response.data\n  }\n)\n\nexport const getWorkRegister = createAsyncThunk(\"WORK_REGISTER\",\n  async (args) => {\n    const response = await WorkService.register(args)\n    alert(`getWorkRegister() : ` + JSON.stringfy(args))\n\n    return response.data\n  }\n)\n\nexport const getWorkRead = createAsyncThunk(\"WORK_READ\",\n  async () => {\n    const response = await WorkService.read()\n\n    return response.data\n  }\n)\n\nexport const getWorkModify = createAsyncThunk(\"WORK_MODIFY\",\n  async (args) => {\n    const response = await WorkService.modify(args)\n\n    return response.data\n  }\n)\n\nexport const getWorkDelete = createAsyncThunk(\"WORK_DELETE\",\n  async (args) => {\n    const response = await WorkService.del(args)\n\n    return response.data\n  }\n)\n\nconst workSlice = createSlice({\n  name: 'works',\n  initialState: [],\n  reducer: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getWorkList.fulfilled, (state, { payload }) => {\n        \n      })\n      .addCase(getWorkRegister.fulfilled, (state, { payload }) => {\n        alert(`등록 : ${payload}`)\n      })\n      .addCase(getWorkRead.fulfilled, (state, { payload }) => {\n\n      })\n      .addCase(getWorkModify.fulfilled, (state, { payload }) => {\n\n      })\n      .addCase(getWorkDelete.fulfilled, (state, { payload }) => {\n\n      })\n  }\n})\n\nconst { actions, reducer } = workSlice\nexport const { } = actions\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}