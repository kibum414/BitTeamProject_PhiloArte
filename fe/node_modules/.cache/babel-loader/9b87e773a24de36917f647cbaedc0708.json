{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { ArtService } from 'webapp/art';\nexport const getArtList = createAsyncThunk(\"ART_LIST\", async page => {\n  const response = await ArtService.list(page);\n  return response.data;\n});\nexport const getArtRegister = createAsyncThunk(\"ART_REGISTER\", async args => {\n  const response = await ArtService.register(args);\n  return response.data;\n});\nexport const getArtRead = createAsyncThunk(\"ART_READ\", async args => {\n  const response = await ArtService.read(args);\n  return response.data;\n});\nexport const getArtModify = createAsyncThunk(\"ART_MODIFY\", async args => {\n  const response = await ArtService.modify(args);\n  return response.data;\n});\nexport const getArtDelete = createAsyncThunk(\"ART_DELETE\", async args => {\n  const response = await ArtService.del(args);\n  return response.data;\n});\nconst artSlice = createSlice({\n  name: 'arts',\n  initialState: {\n    pageResult: {\n      dtoList: [],\n      page: 1,\n      pageList: [],\n      start: 1,\n      end: 1,\n      prev: false,\n      next: false\n    },\n    msg: ''\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getArtList.fulfilled, (state, {\n      payload\n    }) => {\n      console.log(payload);\n      state.pageResult.dtoList = payload;\n    }).addCase(getArtRegister.fulfilled, (state, {\n      payload\n    }) => {\n      alert(`등록 : ${payload}`);\n    }).addCase(getArtRead.fulfilled, (state, {\n      payload\n    }) => {\n      return [...payload];\n    }).addCase(getArtModify.fulfilled, (state, {\n      payload\n    }) => {}).addCase(getArtDelete.fulfilled, (state, {\n      payload\n    }) => {});\n  }\n});\nconst {\n  actions,\n  reducer\n} = artSlice;\nexport const {} = actions;\nexport default reducer;","map":{"version":3,"sources":["/Users/superstar_pkb/project/BitCamp Team Project V2/fe/src/webapp/art/reducer/art.reducer.js"],"names":["createAsyncThunk","createSlice","ArtService","getArtList","page","response","list","data","getArtRegister","args","register","getArtRead","read","getArtModify","modify","getArtDelete","del","artSlice","name","initialState","pageResult","dtoList","pageList","start","end","prev","next","msg","reducers","extraReducers","builder","addCase","fulfilled","state","payload","console","log","alert","actions","reducer"],"mappings":"AAAA,SAASA,gBAAT,EAA2BC,WAA3B,QAA8C,kBAA9C;AACA,SAASC,UAAT,QAA2B,YAA3B;AAEA,OAAO,MAAMC,UAAU,GAAGH,gBAAgB,CAAC,UAAD,EACxC,MAAOI,IAAP,IAAgB;AACd,QAAMC,QAAQ,GAAG,MAAMH,UAAU,CAACI,IAAX,CAAgBF,IAAhB,CAAvB;AAEA,SAAOC,QAAQ,CAACE,IAAhB;AACD,CALuC,CAAnC;AAQP,OAAO,MAAMC,cAAc,GAAGR,gBAAgB,CAAC,cAAD,EAC5C,MAAOS,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMH,UAAU,CAACQ,QAAX,CAAoBD,IAApB,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CAL2C,CAAvC;AAQP,OAAO,MAAMI,UAAU,GAAGX,gBAAgB,CAAC,UAAD,EACxC,MAAOS,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMH,UAAU,CAACU,IAAX,CAAgBH,IAAhB,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CALuC,CAAnC;AAQP,OAAO,MAAMM,YAAY,GAAGb,gBAAgB,CAAC,YAAD,EAC1C,MAAOS,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMH,UAAU,CAACY,MAAX,CAAkBL,IAAlB,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CALyC,CAArC;AAQP,OAAO,MAAMQ,YAAY,GAAGf,gBAAgB,CAAC,YAAD,EAC1C,MAAOS,IAAP,IAAgB;AACd,QAAMJ,QAAQ,GAAG,MAAMH,UAAU,CAACc,GAAX,CAAeP,IAAf,CAAvB;AAEA,SAAOJ,QAAQ,CAACE,IAAhB;AACD,CALyC,CAArC;AAQP,MAAMU,QAAQ,GAAGhB,WAAW,CAAC;AAC3BiB,EAAAA,IAAI,EAAE,MADqB;AAE3BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,UAAU,EAAE;AACVC,MAAAA,OAAO,EAAE,EADC;AAEVjB,MAAAA,IAAI,EAAE,CAFI;AAGVkB,MAAAA,QAAQ,EAAE,EAHA;AAIVC,MAAAA,KAAK,EAAE,CAJG;AAKVC,MAAAA,GAAG,EAAE,CALK;AAMVC,MAAAA,IAAI,EAAE,KANI;AAOVC,MAAAA,IAAI,EAAE;AAPI,KADA;AAUZC,IAAAA,GAAG,EAAE;AAVO,GAFa;AAc3BC,EAAAA,QAAQ,EAAE,EAdiB;AAe3BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CACJC,OADH,CACW5B,UAAU,CAAC6B,SADtB,EACiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACrDC,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACAD,MAAAA,KAAK,CAACb,UAAN,CAAiBC,OAAjB,GAA2Ba,OAA3B;AACD,KAJH,EAKGH,OALH,CAKWvB,cAAc,CAACwB,SAL1B,EAKqC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACzDG,MAAAA,KAAK,CAAE,QAAOH,OAAQ,EAAjB,CAAL;AACD,KAPH,EAQGH,OARH,CAQWpB,UAAU,CAACqB,SARtB,EAQiC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB;AACrD,aAAO,CAAC,GAAGA,OAAJ,CAAP;AACD,KAVH,EAWGH,OAXH,CAWWlB,YAAY,CAACmB,SAXxB,EAWmC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAExD,CAbH,EAcGH,OAdH,CAcWhB,YAAY,CAACiB,SAdxB,EAcmC,CAACC,KAAD,EAAQ;AAAEC,MAAAA;AAAF,KAAR,KAAwB,CAExD,CAhBH;AAiBD;AAjC0B,CAAD,CAA5B;AAoCA,MAAM;AAAEI,EAAAA,OAAF;AAAWC,EAAAA;AAAX,IAAuBtB,QAA7B;AACA,OAAO,MAAM,KAAMqB,OAAZ;AACP,eAAeC,OAAf","sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\nimport { ArtService } from 'webapp/art'\n\nexport const getArtList = createAsyncThunk(\"ART_LIST\",\n  async (page) => {\n    const response = await ArtService.list(page)\n\n    return response.data\n  }\n)\n\nexport const getArtRegister = createAsyncThunk(\"ART_REGISTER\",\n  async (args) => {\n    const response = await ArtService.register(args)\n\n    return response.data\n  }\n)\n\nexport const getArtRead = createAsyncThunk(\"ART_READ\",\n  async (args) => {\n    const response = await ArtService.read(args)\n\n    return response.data\n  }\n)\n\nexport const getArtModify = createAsyncThunk(\"ART_MODIFY\",\n  async (args) => {\n    const response = await ArtService.modify(args)\n\n    return response.data\n  }\n)\n\nexport const getArtDelete = createAsyncThunk(\"ART_DELETE\",\n  async (args) => {\n    const response = await ArtService.del(args)\n\n    return response.data\n  }\n)\n\nconst artSlice = createSlice({\n  name: 'arts',\n  initialState: {\n    pageResult: {\n      dtoList: [],\n      page: 1,\n      pageList: [],\n      start: 1,\n      end: 1,\n      prev: false,\n      next: false\n    },\n    msg: ''\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(getArtList.fulfilled, (state, { payload }) => {\n        console.log(payload)\n        state.pageResult.dtoList = payload\n      })\n      .addCase(getArtRegister.fulfilled, (state, { payload }) => {\n        alert(`등록 : ${payload}`)\n      })\n      .addCase(getArtRead.fulfilled, (state, { payload }) => {\n        return [...payload]\n      })\n      .addCase(getArtModify.fulfilled, (state, { payload }) => {\n\n      })\n      .addCase(getArtDelete.fulfilled, (state, { payload }) => {\n\n      })\n  }\n})\n\nconst { actions, reducer } = artSlice\nexport const { } = actions\nexport default reducer\n"]},"metadata":{},"sourceType":"module"}